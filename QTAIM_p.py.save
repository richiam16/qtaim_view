class PG:
        def __init__(self,centre,type,exp):
		self.centre=float(centre)
		self.type=type
		self.exp=exp

	def cons_exp(self,CI):
		import sympy as sp
		myfile=open("/home/ricardo/Escritorio/Corr/QTAIM/typeG.txt","r")
		lines=myfile.readlines()
		x,y,z=sp.symbols("x y z")
		self.exp=self.exp[:-4]+"E"+self.exp[len(self.exp)-3:]
		self.exp=float(self.exp)
		for i in range(0,len(lines)):
			prueb=lines[i].split()
			if prueb[0]==self.type:
				fx=x**float(prueb[1])
				fy=y**float(prueb[2])
				fz=z**float(prueb[3])
		self.A=fx*fy*fz
		#self.F=self.exp*sp.exp(-self.exp*(x**2+y**2+z**2))
		for i in range(0,len(CI)):
			print CI[i][1]
			print self.centre
			if self.centre==CI[i][1]:
				self.cx,self.cy,self.cz=CI[i][2],CI[i][3],CI[i][4]
		self.F=self.exp*sp.exp(-self.exp*((x+self.cx)**2+(y+self.cy)**2+(z+self.cz)**2))

	#def primeF(self):
	#def primeA(self):
	#def primeG(self)		

class Mol:
        def __init__(self,path):
            self.path=path
             
        def rdwfn(self):
            myfile=open(self.path,"r")
            lines=myfile.readlines()
            self.nom=lines[0][:-1]
            temp=lines[1].split()
            self.btype=temp[0]
            self.num_mol_orn=float(temp[1])
            self.num_prim=float(temp[4])
            self.num_nucl=float(temp[6])
	    self.CI=[]
	    self.M=[]
	    self.MC=[]
	    centre=[]
	    type=[]
	    exp=[]
	    for i in range(2,2+int(self.num_nucl)):
	    	temp_2=lines[i].split()
		self.CI.append([temp_2[0],float(temp_2[1]),float(temp_2[4]),float(temp_2[5]),float(temp_2[6]),float(temp_2[9])])
	    for i in range(2+int(self.num_nucl),len(lines)):
		clasi=lines[i].split()
		if clasi[0]=="CENTRE":
			centre=centre+clasi[2:]
		if clasi[0]=="TYPE":
			type=type+clasi[2:]
		if clasi[0]=="EXPONENTS":
			exp=exp+clasi[1:]
		if clasi[0]=="MO":
			self.M.append([clasi[1],clasi[7],clasi[11]])
			conf=0
			OM=[]
			for j in range(i,len(lines)):
				if len(OM)!=self.num_prim:
					conf=conf+1
					app=lines[conf+i].split()
					OM=OM+app
			self.MC.append(OM)

		if clasi[0]=="END":
			temp_4=lines[i+1].split()
			self.ET=float(temp_4[3])
			self.viral=float(temp_4[6])

	    self.GF=[PG(centre[i],type[i],exp[i]) for i in range(0,len(centre))]

	def gaus4(self):
		for i in range(0,len(self.GF)):
			self.GF[i].cons_exp(self.CI)
		for i in range(0,len(self.MC)):
			for j in range(0,len(self.MC[0])):
				self.MC[i][j]=self.MC[i][j][:-4]+"E"+self.MC[i][j][len(self.MC[i][j])-3:]
				self.MC[i][j]=float(self.MC[i][j])
		self.psi=[]
		for i in range(0,len(self.M
